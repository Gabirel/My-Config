if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=ucs-bom,utf-8,latin1
endif

set nocompatible	" Use Vim defaults (much better!)
set bs=indent,eol,start		" allow backspacing over everything in insert mode
"set ai			" always set autoindenting on
"set backup		" keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set smartcase
"set paste
syntax enable
syntax on
set nu
set autoindent
set cindent
set completeopt-=preview
set cinoptions=g0	"let "pubulic" get smart
set shell=bash		"fish shell doesn't work
set fileencodings=utf-8,gbk
colorscheme default


""""""""""Vundle Start"""""""""""""""
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-lua-ftplugin'
Plugin 'artur-shaik/vim-javacomplete2'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'SirVer/ultisnips'
Plugin 'klen/python-mode'
Plugin 'easymotion/vim-easymotion'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'ternjs/tern_for_vim'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'Shutnik/jshint2.vim'
Plugin 'WolfgangMehner/bash-support'
Plugin 'WolfgangMehner/c-support'
call vundle#end()
"""""""""Vundle End"""""""""""""""""""

""""""""""KEYMAP SETTED""""""""""""
" F3                              "
" F4				  "
" F5	                          "
" F6				  "
" F8				  "
" F9				  "
" F10				  "
"""""""""""""""""""""""""""""""""""

""""""""""Lua Start"""""""""""""""""
let g:lua_check_syntax = 1
let g:lua_check_library = 1
let g:lua_complete_dynamic = 0
let g:lua_complete_keywords = 1
let g:lua_complete_globals = 1
let g:lua_complete_library = 1
let g:lua_complete_omni = 1
let g:lua_safe_omni_modules = 1

""""""""""Lua End"""""""""""""""""""


""""""""""Syntastic  Start""""""""""""
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_html_checkers=['jshint']
let g:syntastic_check_on_open = 1
let g:syntastic_cpp_include_dirs = ['/usr/include/']
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler = 'clang++'
"set error &&  warning signs  && other settings
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '!'
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_python_exec = '/usr/bin/python2'
let g:syntastic_auto_jump = 1
let g:syntastic_loc_list_height = 5
let g:EclimFileTypeValidate = 0
let g:syntastic_shell = "/bin/bash"
"let g:syntastic_mode_map = {"mode":"active", "passive_filetypes":["python"]}
""""""""""Syntastic End""""""""""""


""""""""""""YCM Start""""""""""""""""""""
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/.ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_seed_identifiers_with_syntax=1    " 语法关键字补全
inoremap <leader><leader> <C-x><C-o>
let g:ycm_complete_in_comments = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:pydiction_location = '~/.vim/tools/pydiction/complete-dict'
let g:ycm_show_diagnostics_ui = 0		" Syntastic checker asks this
let g:ycm_semantic_triggers = {
	\ 'css': [ 're!^\s{4}', 're!:\s+'],
	\ 'html': [ '</'],
	\ 'javascript': ['.'],
	\ 'php': ['.', '->'],
	\ 'lua':['.',':'],}
let g:ycm_server_use_vim_stdout = 1
let g:ycm_server_log_level = 'debug'

nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
"""""""""""YCM End"""""""""""""""""""



""""""""""Vim-Javacomplete2 Start"""""
nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
imap <F4> <Plug>(JavaComplete-Imports-AddSmart)
nmap <F5> <Plug>(JavaComplete-Imports-AddMissing)
imap <F5> <Plug>(JavaComplete-Imports-AddMissing)
nmap <F6> <Plug>(JavaComplete-Imports-RemoveUnused)
imap <F6> <Plug>(JavaComplete-Imports-RemoveUnused)
" - add close brace automatically, when complete method declaration. Disable
"   if it conflicts with another plugins.
let g:JavaComplete_ClosingBrace = 1
let g:JavaComplete_JavaviDebug = 0
""""""""Vim-Javacomplete2 End""""""""""""""

""""""""""Gvim Start"""""""""""""""""""
if has("gui_running")
    "au GUIEnter * simalt ~x  " 窗口启动时自动最大化
    "winpos 20 20            " 指定窗口出现的位置，坐标原点在屏幕左上角
    "set lines=20 columns=90 " 指定窗口大小，lines为高度，columns为宽度
    set guioptions-=m       " 隐藏菜单栏
    set guioptions-=T       " 隐藏工具栏
    "set guioptions-=L       " 隐藏左侧滚动条
    "set guioptions-=r       " 隐藏右侧滚动条
    "set guioptions-=b       " 隐藏底部滚动条
    "set showtabline=0       " 隐藏Tab栏
    set background=dark
    colorscheme solarized
    "if &term == 'xterm' || &term == 'screen'
        set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
    "endif
    set guifont=Ubuntu\ Mono\ Regular\ 14,Ubuntu\ Mono\ Regular\ 14,Ubuntu\ Mono\ Regular\ 14,Ubuntu\ Mono\ Regular\ 14,

endif

""""""""""Gvim End"""""""""""""""""""


""""""""""NERDTree Start""""""""""""""""
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
map <F3> :NERDTreeMirror<CR>	" F3快速实现左侧文件夹目录窗口的显示/隐藏
map <F3> :NERDTreeToggle<CR>
""""""""""NERDTree END""""""""""""""""


"""""""""Tagbar Start""""""""""""""""
nmap <F8> :TagbarToggle<CR>
"""""""""Tagbar End""""""""""""""""""


"""""""""UltiSnips Start""""""""""""
set runtimepath+=~/.vim/UltiSnips
let g:UltiSnipsUsePythonVersion = 2
"let g:UltiSnipsListSnippets="<c-e>"
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
" UltiSnips completion function that tries to expand a snippet. If there's no
" snippet for expanding, it checks for completion window and if it's
" shown, selects first element. If there's no completion window it tries to
" jump to next placeholder. If there's no placeholder it just returns TAB key 
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

function! g:UltiSnips_Reverse()
  call UltiSnips#JumpBackwards()
  if g:ulti_jump_backwards_res == 0
    return "\<C-P>"
  endif

  return ""
endfunction


if !exists("g:UltiSnipsJumpForwardTrigger")
  let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif
if !exists("g:UltiSnipsJumpBackwardTrigger")
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger     . " <C-R>=g:UltiSnips_Complete()<cr>"
au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"
"""""""""UltiSnips END""""""""""""""



"""""""""Python Mode Start""""""""""
"let g:pymode_python = 'disable'
let g:pymode = 1
let g:pymode_python = 'python'
let g:pymode_indent = 1
let g:pymode_run = 1
let g:pymode_run_bind = '<leader>r'
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'
let g:pymode_rope_autoimport = 1
let g:pymode_lint = 1
let g:pymode_lint_message = 1
let g:pymode_lint_on_write = 1
let g:pymode_lint_cwindow = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_print_as_function = 1
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0
map <F9> :PymodeLintToggle<CR>
map <F10> :PymodeLintAuto<CR>
"""""""""Python Mode END""""""""""""


"""""""""PHP Setting""""""""""""""""
let php_sql_query = 1
let php_htmlInStrings = 1
let php_baselib = 1
let php_smart_members = 1
let php_alt_properties = 1
let php_alt_construct_parents = 1
let php_asp_tags = 1
let php_highlight_quotes = 1
"""""""""PHP Setting END"""""""""""


"""""""""vim-css3-syntax"""""""""""
augroup VimCSS3Syntax
	autocmd!
	autocmd FileType css setlocal iskeyword+=-
augroup END
"""""""""vim-css3-syntax END"""""""


"""""""""tern_for_vim"""""""""""""""
let tern_show_signature_in_pum = 1
let tern_show_argument_hints = 'on_hold'
autocmd FileType javascript nnoremap <leader>td :TernDef<CR>
autocmd FileType javascript setlocal omnifunc=tern#Complete
"""""""""tern_for_vim END"""""""""""


"""""""""vim-jsbeautify"""""""""""""""
map <c-f> :call JsBeautify()<cr>
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
autocmd FileType jsx noremap <buffer> <c-f> :call JsxBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>"
"""""""""vim-jsbeautify End"""""""""""



"""""""""jshint2.vim Start"""""""""""
let jshint2_read = 1
let jshint2_save = 1
let jshint2_close = 1
"""""""""jshint2.vim End""""""""""""""

" Hightligh CursorLine and CursorColumn
set cursorline
set cursorcolumn
highlight CursorLine guibg=lightblue guifg=black ctermbg=none ctermfg=none
highlight CursorColumn guibg=lightblue ctermbg=cyan guifg=black ctermfg=none


" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup fedora
  autocmd!
  " In text files, always limit the width of text to 78 characters
  " autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
  " don't write swapfile on most commonly used directories for NFS mounts or USB sticks
  autocmd BufNewFile,BufReadPre /media/*,/run/media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
  " start with spec file template
  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
  augroup END
endif

if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add $PWD/cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

"filetype settings
filetype on
filetype plugin on
filetype indent on
"filetype settings END

if &term=="xterm"
     set t_Co=8
     set t_Sb=[4%dm
     set t_Sf=[3%dm
endif



" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"


""""""""""""""""""""*.filetype set syntax=filetype""""""""""""
au BufNewFile,BufRead *.pro set filetype=make	"Vim syntax highlighting for Qt’s .pro files
au BufNewFile,BufRead *.pro set filetype=make
au BufNewFile,BufRead *.c set filetype=c
au BufNewFile,BufRead *.cpp set filetype=cpp
au BufNewFile,BufRead *.py set filetype=python
au BufNewFile,BufRead *.lua set filetype=lua
au BufNewFile,BufRead *.h set filetype=cpp
au BufNewFile,BufRead *.html set filetype=html
au BufNewFile,BufRead *.htm set filetype=html
au BufNewFile,BufRead *.java set filetype=java
au BufNewFile,BufRead *.class set filetype=java
au BufNewFile,BufRead *.php set filetype=php
au BufNewFile,BufRead *.css set filetype=css
au BufNewFile,BufRead *.js set filetype=javascript

""""""""""""""""""""""""autocmd""""""""""""""""""""""""
autocmd FileType python setlocal et sta sw=4 sts=4 sts=4
autocmd FileType lua setlocal et sta sw=4 sts=4 sts=4
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
au FileType xhtml,xml,php,html so ~/.vim/ftplugin/html_autoclosetag.vim
""""""""code_part_autocomplete""""""""


" 括号引号补全
inoremap ( ()<Esc>i
inoremap [ []<Esc>i
inoremap { {}<Esc>i
inoremap ) <c-r>=ClosePair(')')<CR>
inoremap ] <c-r>=ClosePair(']')<CR>
inoremap } <c-r>=CloseBracket()<CR>
inoremap " <c-r>=QuoteDelim('"')<CR>
inoremap ' <c-r>=QuoteDelim("'")<CR>

function ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endf

function CloseBracket()
	if match(getline(line('.') + 1), '\s*}') < 0
		return "\<CR>}"
	else
		return "\<Esc>j0f}a"
	endif
endf

function QuoteDelim(char)
	let line = getline('.')
	let col = col('.')
	if line[col - 2] == "\\"
		"Inserting a quoted quotation mark into the string
		return a:char
	elseif line[col - 1] == a:char
		"Escaping out of the string
		return "\<Right>"
	else
		"Starting a string
		return a:char.a:char."\<Esc>i"
	endif
endf
